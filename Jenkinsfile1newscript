
@Library('SharedLibssm') _

node('nodes'){
    
def mavenHome = tool name: "maven3.8.4" 
properties([buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '5', 
daysToKeepStr: '', numToKeepStr: '5')), [$class: 'JobLocalConfiguration', changeReasonComment: ''], 
pipelineTriggers([pollSCM('* * * * *')])])

echo "Job name is:${env.JOB_NAME}" 
echo "Node name is:${env.NODE_NAME}" 
echo "Build number is:${env.BUILD_NUMBER}" 

try
{
sendSlackNotifications('STARTED')
stage('CheckoutCode')
{
git branch: 'development', credentialsId: 'fca1e27a-87d4-4a96-b365-d784613b127a', url: 
'https://github.com/sagardevops111/maven-web-application.git'
}
stage('Build')
{
sh "${mavenHome}/bin/mvn clean package"
}
/*
stage('ExecuteSonarQubeReport')
{
sh "${mavenHome}/bin/mvn sonar:sonar"
}

stage('UploadArtifactsintoNexus')
{
sh "${mavenHome}/bin/mvn deploy"
} 

stage('DeployAppIntoTomcatServer')
{
sshagent(['53449ec8-9f6a-4f95-a8f3-a9263f87e2cb']) {
 sh "scp -o StrictHostKeyChecking=no target/maven-web-application.war ec2-user@43.204.218.112:/opt/apache-tomcat-9.0.63/webapps"
}

}
*/
} //try close
catch (e)
{
currentBuild.result = "FAILED"
throw e
}//catch close

finally 
{
sendSlackNotifications(currentBuild.result)
}//finally close
}//Node closing

//Below code will use for send slack notification
/*
def sendslacknotification(String buildStatus = 'STARTED') {
  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESSFUL'

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESSFUL') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
  }

  // Send notifications
  slackSend (color: colorCode, message: summary)
}
*/
